

// File: api/kvstore/v1/raft_internal.proto
syntax = "proto3";

package kvstore.v1;

option go_package = "Distributed_KV_STORE/api/kvstore/v1;kvstore";

// RaftInternal service is for communication between Raft nodes.
service RaftInternal {
  // RequestVote is called by candidates to gather votes.
  rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply) {}

  // AppendEntries is called by leader to replicate log entries; also used as heartbeat.
  rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply) {}
}

// LogEntry represents a single command in the Raft log.
message LogEntry {
  uint64 term = 1;
  bytes command = 2; // The command for the state machine.
}

message RequestVoteArgs {
  uint64 term = 1;
  string candidate_id = 2;
  uint64 last_log_index = 3;
  uint64 last_log_term = 4;
}

message RequestVoteReply {
  uint64 term = 1;
  bool vote_granted = 2;
}

message AppendEntriesArgs {
  uint64 term = 1;           // leader's term
  string leader_id = 2;        // so follower can redirect clients
  uint64 prev_log_index = 3; // index of log entry immediately preceding new ones
  uint64 prev_log_term = 4;  // term of prev_log_index entry
  repeated LogEntry entries = 5;       // log entries to store (empty for heartbeat)
  uint64 leader_commit = 6;  // leader's commitIndex
}

message AppendEntriesReply {
  uint64 term = 1;    // currentTerm, for leader to update itself
  bool success = 2; // true if follower contained entry matching prev_log_index and prev_log_term
}